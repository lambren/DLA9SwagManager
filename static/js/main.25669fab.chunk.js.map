{"version":3,"sources":["Constants.js","Components/ResetPassword.js","Components/AddSwagBadge.js","Components/MassUpload.js","Components/ListItem.js","Components/List.js","Components/BadgeScanDelivery.js","Components/Orders.js","Components/CheckAssociate.js","Components/Login.js","Components/Register.js","App.js","serviceWorker.js","index.js"],"names":["HOSTNAME","ResetPassword","props","alert","useAlert","useState","user_name","setUserName","loading","setLoading","onSubmit","e","preventDefault","fetch","then","res","json","data","status","success","reason","error","catch","err","console","log","finally","className","style","display","justifyContent","alignItems","onChange","target","value","placeholder","onClick","AddSwagBadge","user_id","setUserId","swag_amt","setSwag","setReason","amountRef","createRef","useEffect","current","today","Date","toLocaleDateString","method","headers","body","JSON","stringify","user_data","manager_user_name","date","user","id","ref","MassUpload","hideResults","setHideResults","path","setPath","successList","setSuccessList","failedList","setFailedList","submitAddition","a","now","associateData","paddingTop","event","files","type","accept","fr","FileReader","readAsText","onloadend","uploadedFile","result","length","slice","currentIndex","getNextToken","token","parseFileAndSubmit","backgroundColor","maxHeight","overflowY","map","item","margin","borderBottom","ListItem","confirm","setConfirm","confirmType","setConfirmType","deliverOrder","cart_id","getStore","fulfillOrder","cancelOrder","displayButton","selectColor","fontWeight","user_first_name","user_manager","swag_name","quantity","List","search","setSearch","flexDirection","title","marginTop","listOfOrders","filter","includes","key","BadgeScanDelivery","count","Orders","setListOfOrder","order","color","flexWrap","alignContents","CheckAssociate","setUserID","window","open","Login","setRoute","password","setPassword","onLogin","toLowerCase","setManager","setID","confirmPassword","setConfirmPassword","chooseRoute","App","route","maxWidth","Register","textAlign","padding","borderRadius","href","selectRoute","Boolean","location","hostname","match","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","render","StrictMode","template","AlertTemplate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.25669fab.chunk.js","sourcesContent":["const HOSTNAME = 'https://tranquil-meadow-63605.herokuapp.com/';\r\nexport {HOSTNAME}","import React, {useState} from 'react';\r\nimport {HOSTNAME} from './../Constants'\r\nimport {useAlert} from 'react-alert';\r\n\r\nconst ResetPassword = (props) => {\r\n\r\n    const alert = useAlert();\r\n    const [user_name, setUserName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'reset-password/' + user_name)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.status === 'SUCCESS')\r\n                    alert.success('SUCCESSFULLY RESETED PASSWORD FOR ASSOCIATE!')\r\n                else if (data.reason === 'NO_MATCH')\r\n                    alert.error('ASSOCIATE LOGIN IS NOT ON RECORD');\r\n                else alert.error('SERVER ERROR: PLEASE TRY AGAIN LATER OR CONTACT IT')\r\n            }).catch(err => {\r\n                console.log(err);\r\n                alert.error('CONNECTION ISSUE, PLEASE CHECK YOUR INTERNET CONNECTION');\r\n            }).finally(() => setLoading(false));\r\n    }\r\n\r\n    return (\r\n    <div className='display'>\r\n        {\r\n            (loading) ? <div className='loader'></div> :\r\n                <div>\r\n                <h2>Password Reset</h2>\r\n                <form onSubmit={onSubmit} style={{display:'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                    <input onChange={(e)=>setUserName(e.target.value)}placeholder=\"Enter AA's login\"></input>\r\n                    <button onClick={onSubmit}>Submit</button>\r\n                </form>\r\n            </div>\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default ResetPassword;","import React, {useState, createRef, useEffect} from 'react';\r\nimport {useAlert} from 'react-alert';\r\nimport {HOSTNAME} from '../Constants'\r\n\r\nconst AddSwagBadge = (props) => {\r\n    const alert = useAlert();\r\n\r\n    const [user_id, setUserId] = useState('');\r\n    const [swag_amt, setSwag] = useState(0);\r\n    const [reason, setReason] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const amountRef = createRef();\r\n\r\n\r\n\r\n    useEffect(()=> {\r\n        if (!loading)\r\n        {\r\n            if (!amountRef.current.value) \r\n                amountRef.current.placeholder = swag_amt;\r\n        }\r\n    });\r\n\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n\r\n        \r\n        if (!user_id || !reason || !swag_amt)\r\n        {\r\n            alert.error('YOU MUST FILL OUT ALL FIELDS BEFORE SUBMITTING');\r\n            return;\r\n        }\r\n\r\n        const now = new Date();\r\n        const today = now.toLocaleDateString();\r\n\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'add-balance/', {\r\n            method:'POST',\r\n            headers : {\r\n                \"Content-Type\" : 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user_data: user_id, \r\n                swag_amt,\r\n                reason,\r\n                manager_user_name: props.manager_user_name,\r\n                date: today                \r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status === 'SUCCESS') alert.success(`SUCCESSFULLY ADDED ${swag_amt} SWAG TO ${data.user.user_name}`);\r\n            else if (data.reason === 'NO_MATCH') alert.error(`ERROR: ${user_id} IS NOT FOUND IN RECORDS`);\r\n            else alert.error('ERROR: SERVER ERROR PLEASE TRY AGAIN LATER');\r\n\r\n        }).catch(e => {\r\n            console.log(e);\r\n            alert.error('CONNECTION ERROR, PLEASE CHECK YOUR INTERNET CONNECTION');\r\n        }).finally(\r\n            () => {\r\n                setLoading(false);\r\n                setUserId('');});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div> { (loading)? <div className='loader'></div> :\r\n                <div>\r\n                    <h2>Individual Swag Addition</h2>\r\n                    <form onSubmit={onSubmit}>\r\n                        <label>$</label>\r\n                        <input id='amount' ref={amountRef} \r\n                            onChange={(e) => setSwag(e.target.value)}></input>\r\n                \r\n                        <input \r\n                            placeholder='Enter reason of distribution'\r\n                            onChange={(e) => setReason(e.target.value)}></input>\r\n\r\n                        <input \r\n                            placeholder='Scan Badge or enter Login' \r\n                            onChange={(e) => setUserId(e.target.value)}></input>\r\n                        \r\n                        <button onClick={onSubmit}>Submit</button>\r\n\r\n                    </form>\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AddSwagBadge;","import React, {useState} from 'react';\r\nimport { useAlert} from 'react-alert'\r\nimport {HOSTNAME} from './../Constants'\r\nimport AddSwagBadge from './AddSwagBadge'\r\n\r\nconst MassUpload = (props) => {\r\n    const [hideResults, setHideResults] = useState(true);\r\n    const [path, setPath] = useState('');\r\n    const [successList, setSuccessList] = useState([]);\r\n    const [failedList, setFailedList] = useState([]);\r\n\r\n    const alert = useAlert();\r\n\r\n    const submitAddition = async (user_data, swag_amt, reason) => {\r\n\r\n        const now = new Date();\r\n        const today = now.toLocaleDateString();\r\n\r\n        const associateData = {\r\n            user_data, \r\n            swag_amt, \r\n            reason, \r\n            manager_user_name: props.manager_user_name,\r\n            date: today\r\n        }\r\n        const res = await fetch(HOSTNAME + 'add-balance/', {\r\n            method: 'POST', \r\n            headers: {\r\n                \"Content-Type\" : \"application/json\"\r\n            },\r\n            body: JSON.stringify(associateData),\r\n        })\r\n\r\n        const data = await res.json();\r\n        \r\n        if (data.status === 'SUCCESS')\r\n            setSuccessList(successList => [...successList, associateData]);\r\n        else \r\n            setFailedList(failedList => [...failedList, associateData]);\r\n    }\r\n\r\n    const parseFileAndSubmit = (uploadedFile) => {\r\n        let currentIndex = 23;\r\n\r\n        const getNextToken = () => {\r\n            var token = '';\r\n    \r\n            if (uploadedFile[currentIndex] === `\"`)\r\n            {\r\n                ++currentIndex;\r\n                while (uploadedFile[currentIndex] !== `\"`\r\n                    && currentIndex < uploadedFile.length)\r\n                {\r\n                    token += uploadedFile[currentIndex];\r\n                    ++currentIndex;\r\n                }\r\n                currentIndex += 2;\r\n                return token;\r\n            }\r\n            else {\r\n                while (currentIndex < uploadedFile.length \r\n                    && uploadedFile[currentIndex] !== ','\r\n                    && uploadedFile[currentIndex] !== '\\n')\r\n                {\r\n                    if (uploadedFile[currentIndex] !== '\\r')\r\n                        token += uploadedFile[currentIndex];\r\n                    ++currentIndex;\r\n                }\r\n                ++currentIndex;\r\n                return token;\r\n            }\r\n        }\r\n\r\n        var user_data = '',  \r\n            swag_amt = '',\r\n            reason = '';\r\n\r\n        while (currentIndex < uploadedFile.length)\r\n        {\r\n            user_data = getNextToken();\r\n            swag_amt = getNextToken();\r\n            reason = getNextToken();\r\n\r\n            submitAddition(user_data, swag_amt, reason);\r\n        }\r\n    }\r\n\r\n    const columnsAreValid = (uploadedFile) => \r\n    {\r\n        if (uploadedFile.length < 23) return false;\r\n        if (uploadedFile.slice(0,23) !== 'associate,swag,reason\\r\\n') return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        setHideResults(false);\r\n\r\n        setSuccessList([]);\r\n        setFailedList([]);\r\n\r\n        const fr = new FileReader();\r\n\r\n        fr.readAsText(path)\r\n\r\n        fr.onloadend = () => {\r\n            if (!columnsAreValid(fr.result)) alert.error('INVALID DATA FORMAT');\r\n            else parseFileAndSubmit(fr.result);\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    return(\r\n        <div className='display'>\r\n            <AddSwagBadge manager_user_name={props.manager_user_name} />\r\n            <h2 style={{paddingTop: '30px'}}>Mass Swag Distribution</h2>\r\n            <label>Select .csv file to upload</label>\r\n            <input \r\n                onChange={(event) => setPath(event.target.files[0])} \r\n                type='file' accept='.csv'></input>\r\n            <button onClick={handleSubmit}>Submit</button>\r\n\r\n            <div style={{display: (hideResults)? \"none\": \"block\"}}>\r\n                <h3>SUCCESS</h3>\r\n                <div style={{ backgroundColor: 'white', maxHeight: '100px', overflowY: 'scroll'}}>\r\n                    {successList.map(item=><p style={{margin: '10px', borderBottom: 'solid black 1px'}}>\r\n                        ID: {item.user_data}     ${item.swag_amt}     REASON: {item.reason}</p>)}\r\n                </div>\r\n                \r\n                <h3>FAILED</h3>\r\n                <div style={{backgroundColor: 'white', maxHeight: '100px', overflowY: 'scroll'}}>\r\n                    {failedList.map(item =><p style={{margin: '10px', borderBottom: 'solid black 1px'}}>\r\n                        ID: {item.user_data}     ${item.swag_amt}     REASON: {item.reason}</p>)}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MassUpload;","import React , {useState} from 'react';\r\nimport {useAlert} from 'react-alert'\r\n\r\nimport {HOSTNAME} from './../Constants'\r\nimport './../App.scss'\r\n\r\nconst ListItem = (props) => {\r\n    const alert = useAlert();\r\n    const {item} = props;\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [confirm, setConfirm] = useState(false);\r\n    const [confirmType, setConfirmType] = useState('');\r\n\r\n    /*\r\n    const printLabel = () => {\r\n        window.open(HOSTNAME+'print-label/'+item.cart_id);\r\n    }\r\n    */\r\n\r\n    const deliverOrder = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'temp-delivery/', \r\n        {\r\n            method: 'POST',\r\n            headers : \r\n            {\r\n                'Content-Type':'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                cart_id: item.cart_id,\r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status==='SUCCESS')\r\n                alert.success('SUCCESSFULLY MARKED ORDER AS DELIVERED');\r\n            else alert.error('ERROR, PLEASE TRY AGAIN LATER OR WRITE DOWN ORDER PULLED');\r\n\r\n        }).catch(err => {\r\n            console.log(err);\r\n            alert.error('CONNECTION ERROR. PLEASE CHECK YOUR CONNECTION!');\r\n        }).finally(() => {\r\n            setLoading(false);\r\n            props.getStore();\r\n        })\r\n    }\r\n\r\n\r\n    const fulfillOrder = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'fulfill-order/', \r\n        {\r\n            method: 'POST',\r\n            headers : \r\n            {\r\n                'Content-Type':'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                cart_id: item.cart_id,\r\n            })\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            if (data.status==='SUCCESS')\r\n                alert.success('SUCCESSFULLY FULFILLED ORDER');\r\n            else alert.error('ERROR IN FULFILLING ORDER, PLEASE TRY AGAIN LATER');\r\n\r\n        }).catch(err => {\r\n            console.log(err);\r\n            alert.error('CONNECTION ERROR. PLEASE CHECK YOUR CONNECTION!');\r\n        }).finally(() => {\r\n            setLoading(false);\r\n            props.getStore();\r\n        })\r\n    }\r\n\r\n    const cancelOrder = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'cancel-order/', \r\n        {\r\n            method :'POST',\r\n            headers :\r\n            {\r\n                'Content-Type':'application/json',\r\n            },\r\n            body: JSON.stringify(\r\n            {\r\n                cart_id: item.cart_id,\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(data=>{\r\n            if(data.status === 'SUCCESS') alert.success('SUCESSFULLY CANCELLED ORDER');\r\n            else alert.error('SOMETHING WENT WRONG, PLEASE TRY AGAIN LATER');\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            alert.error('CANNOT CONNECT TO SERVER, PLEASE TRY AGAIN LATER');\r\n        })\r\n        .finally(()=>{\r\n            setLoading(false);\r\n            props.getStore();\r\n        })\r\n    }\r\n\r\n    const displayButton = () => {\r\n        switch (confirmType) {\r\n            case 'FULFILL':\r\n                return(\r\n                    <div>\r\n                        <button className='cancel-button' onClick={() => setConfirm(false)}>Go Back</button>\r\n                        <button className='confirm-button' onClick={fulfillOrder}>Confirm Fulfillment</button>\r\n                    </div>\r\n                );\r\n\r\n            case 'CANCEL':\r\n                return(\r\n                    <div>\r\n                        <button className='cancel-button' onClick={() => setConfirm(false)}>Go Back</button>\r\n                        <button className='cancel-button' onClick={cancelOrder}>Confirm Cancellation</button>\r\n                    </div>\r\n                );\r\n            \r\n            case 'DELIVER':\r\n                return(\r\n                    <div>\r\n                        <button className='cancel-button' onClick={() => setConfirm(false)}>Go Back</button>\r\n                        <button className='confirm-button' onClick={deliverOrder}>Confirm order Delivery</button>\r\n                    </div>\r\n                )\r\n            default: return(<div></div>);\r\n        }\r\n    }\r\n\r\n    const selectColor = () => {\r\n        switch(item.status) {\r\n            case 'RECEIVED': return {backgroundColor: '#00b7ff'}\r\n            case 'FULFILLED' : return {backgroundColor: '#6ac482'}\r\n            case 'BACKORDERED' : return {backgroundColor: '#c9cc00' }\r\n            default: return {backgroundColor: '#00b7ff'};\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n        <div id='list-item' style={selectColor()}>\r\n            <div style={{display: (loading)? 'inline' : 'none'}} className='loader big-load'></div>\r\n            <p style={{fontWeight: 'bold'}}>{item.user_name}</p>      \r\n            <p>Name: {item.user_first_name}, Manager: {item.user_manager} </p>\r\n            <p>{item.swag_name} quantity: {item.quantity}</p>\r\n            {\r\n                (item.status==='RECEIVED' || item.status==='BACKORDERED')? \r\n                <div>\r\n                    {(confirm)?\r\n                    <div>\r\n                        {displayButton()}\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <button className='cancel-button' onClick={() => {setConfirmType('CANCEL'); setConfirm(true);}}>Cancel Order</button>\r\n                    </div>\r\n                }\r\n                </div>\r\n                :\r\n                <div>\r\n                    {(confirm)?\r\n                    <div>\r\n                        {displayButton()}\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <button className='cancel-button' onClick={() => {setConfirmType('CANCEL'); setConfirm(true);}}>Cancel Order</button>\r\n                        <button onClick={() => {setConfirmType('DELIVER'); setConfirm(true)}}>Deliver Order</button>\r\n                    </div>\r\n                }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React, {useState} from 'react';\r\nimport ListItem from './ListItem';\r\nimport './../App.scss'\r\nconst List = (props) => {\r\n    const [search, setSearch] = useState('');\r\n    const onChangeSearch = (event) => {\r\n        setSearch(event.target.value);\r\n    }\r\n\r\n    return (\r\n    <div id='list'>\r\n        <div style={{display: \"flex\", flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\r\n            <h2>{props.title}</h2>\r\n            <input placeholder='Search for login' onChange={onChangeSearch}></input>\r\n            <button style={{marginTop:'0px'}} onClick={props.getStore}>Refresh</button>\r\n        </div>\r\n        <div id='inner-list'>\r\n            {props.listOfOrders.filter(item => item.user_name.includes(search)).map(item => <ListItem key={item.cart_id} getStore={props.getStore} item={item}/>)}\r\n        </div>\r\n        \r\n    </div>)\r\n}\r\nexport default List;","import React, {useState} from 'react'; \r\n\r\nimport {useAlert} from 'react-alert';\r\nimport {HOSTNAME} from './../Constants';\r\n\r\nimport './../App.scss'\r\n\r\nconst BadgeScanDelivery = (props) => {\r\n\r\n    const alert = useAlert();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [user_id, setUserId] = useState('');\r\n\r\n\r\n    const onSubmit = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (!user_id)\r\n        {\r\n            alert.error('YOU MUST SCAN ASSOCIATE BADGE BEFORE CLICKING SUBMIT');\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'delivery-by-badge/', {\r\n            method: 'POST',\r\n            headers : {\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                user_id\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.status === 'SUCCESS')\r\n                    alert.success(`SUCESSFULLY MARKED ${data.count} ORDERS FOR DELIVERY!`);\r\n                else if (data.reason === 'NOT_FOUND')\r\n                    alert.error('ASSSOCIATE DOES NOT HAVE ANY FULFILLED ORDERS!');\r\n                else alert.error('SERVER ERROR, PLEASE TRY AGAIN LATER OR CONTACT IT');\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert.error('CONNECTION ISSUE, PLEASE CHECK YOUR INTERNET CONNECTION!');\r\n            })\r\n            .finally(() => {\r\n                setUserId('');\r\n                setLoading(false);\r\n                props.getStore();\r\n            })\r\n        \r\n    }\r\n\r\n    return(\r\n        <div className='display'>\r\n            <h2>Delivery by Badge Scan</h2>\r\n            <div>\r\n            {\r\n                (loading)? <div className='loader'></div> :\r\n                <form onSubmit={onSubmit}>\r\n                    <input placeholder='Scan Associate Badge'\r\n                        onChange={(e) => setUserId(e.target.value)}></input>\r\n                    <button onClick={onSubmit}>Submit</button>\r\n                </form>\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BadgeScanDelivery;","import React, {useEffect, useState} from 'react'\r\n\r\nimport List from './List'\r\nimport BadgeScanDelivery from './BadgeScanDelivery'\r\n\r\nimport {HOSTNAME} from './../Constants'\r\nimport './../App.scss'\r\n\r\n\r\nconst Orders = (props) => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [listOfOrders, setListOfOrder] = useState([]);\r\n\r\n    const getStore = () => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'get-fulfilled-orders/')\r\n        .then(res => res.json())\r\n        .then(data=>{\r\n          if(data.status === 'SUCCESS')\r\n          {\r\n            setListOfOrder(data.order);\r\n          }\r\n          else \r\n          {\r\n            alert.error('FAILED TO GET LIST OF ORDERS')\r\n          }\r\n        }).catch(err => \r\n        {\r\n          console.log(err);\r\n          alert.error('FAILED TO CONNECT TO SERVER, PLEASE CHECK YOU CONNECTION!')\r\n        }).finally(() => setLoading(false));\r\n      }\r\n    \r\n      useEffect(() => {\r\n        setLoading(true);\r\n        fetch(HOSTNAME + 'get-fulfilled-orders/')\r\n        .then(res => res.json())\r\n        .then(data=>{\r\n          if(data.status === 'SUCCESS')\r\n          {\r\n            setListOfOrder(data.order);\r\n          }\r\n          else \r\n          {\r\n            alert.error('FAILED TO GET LIST OF ORDERS')\r\n          }\r\n        }).catch(err => \r\n        {\r\n          console.log(err);\r\n          alert.error('FAILED TO CONNECT TO SERVER, PLEASE CHECK YOU CONNECTION!')\r\n        }).finally(() => setLoading(false));\r\n      },[]);\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {(loading)? <div className='loader'></div> :\r\n            <div style={{display: 'flex', flexDirection: 'column', justifyContent:'center', alignItems: 'center'}}>\r\n              <div id='instructions' className='display'>\r\n                <h3>ORDER DELIVERY/CANCELLATION INSTRUCTIONS</h3>\r\n                <p style={{color:'gray', }}>\r\n                    To cancel an order, you can click the 'Cancel Order' Button corresponding to the order you are cancelling <br/>\r\n                    <br/>**NOTE: please use the following features to mark the order 'DELIVERED' when you hand out an item<br/>\r\n                    To deliver an order, you can click the 'Deliver Order' Button corresponding to the order you are delivering. <br/> <br/>\r\n                    Alternatively, you can scroll down to the bottom of the page and use the Deliver By Badge Scan feature: <br/>\r\n                    Click on the input field and scan the associate's badge, and all fulfilled order of the associate will be marked 'DELIVERED.'</p>\r\n              </div>\r\n              <div style={{display: 'flex', flexWrap: 'wrap', justifyContent:'center', alignItems: 'center', alignContents: 'center'}}>\r\n                  <List getStore={getStore} title='Fulfilled orders' listOfOrders={listOfOrders.filter(item => item.status === 'FULFILLED')}></List>\r\n                  <List getStore={getStore} title='Back Orders' listOfOrders={listOfOrders.filter(item => item.status === 'BACKORDERED')}></List>\r\n              </div>\r\n              <BadgeScanDelivery getStore={getStore}></BadgeScanDelivery>\r\n\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Orders;","import React, {useState} from 'react';\r\nimport {useAlert} from 'react-alert';\r\n\r\nimport {HOSTNAME} from './../Constants'\r\n\r\nconst CheckAssociate = (props) => {\r\n    const alert = useAlert()\r\n    const [user_id, setUserID] = useState('');\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!user_id)\r\n        {\r\n            alert.error('YOU MUST ENTER ASSOCIATE LOGIN BEFORE CLICKING SUBMIT!');\r\n            return;\r\n        }\r\n        window.open(HOSTNAME + \"associate-status/\" + user_id)\r\n    }\r\n\r\n    return (\r\n        <div className='display'>\r\n            <h2>Check Associate's Swag</h2>\r\n                <form onSubmit={onSubmit} style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                    <input placeholder='Scan Badge or enter Login' onChange={(e) => setUserID(e.target.value)}></input>\r\n                    <button onClick={onSubmit}>Submit</button>\r\n                </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckAssociate;","import React, {useState} from 'react';\r\nimport { useAlert } from 'react-alert';\r\nimport {HOSTNAME} from './../Constants'\r\n\r\nconst Login = (props) => {\r\n    const setRoute = props.setRoute;\r\n    const alert = useAlert();\r\n    const [password, setPassword] = useState('');\r\n\r\n    const onLogin = async (e) => {\r\n        e.preventDefault();\r\n        if (!props.manager_user_name || !password) alert.error('PLEASE INPUT BOTH ID AND PASSWORD TO LOGIN');\r\n        else{\r\n            setRoute('LOADING');\r\n        try {\r\n          const res = await fetch(HOSTNAME + 'manager-login', {\r\n            method: 'POST', \r\n            headers: {\r\n              'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              user_name: props.manager_user_name.toLowerCase(),\r\n              password,\r\n            })\r\n          })\r\n    \r\n          const data = await res.json();\r\n          if (data.status === 'SUCCESS')  \r\n          {\r\n            setRoute('MAIN_SCREEN');\r\n          }\r\n          else if (data.reason === 'NOT_FOUND')\r\n          {\r\n            setRoute('INITIATE');\r\n            alert.error('NO MATCHING COMBINATION FOUND');\r\n          }\r\n          else if (data.reason === 'NOT_ACTIVATED')\r\n          {\r\n            setRoute('INITIATE');\r\n            alert.error('YOUR ACCOUNT IS NOT YET ACTIVATED BY THE SWAG STORE MANAGER');\r\n          }\r\n          else {\r\n            setRoute('INITIATE');\r\n            alert.error('SERVER ERROR');\r\n          }\r\n        } catch (e) {\r\n          console.log(e);\r\n            setRoute('INITIATE');\r\n            alert.error('NETWORK ERROR PLEASE CHECK YOUR CONNECTION')\r\n        }\r\n    }\r\n    }\r\n\r\n    return (\r\n        <div className='display'>\r\n          <h3>Manager Login</h3>\r\n          <form style={{color: 'gray'}} onSubmit={onLogin}>\r\n            <label>ID</label>\r\n            <input onChange={e => props.setManager(e.target.value)}></input>\r\n            <label>Password</label>\r\n            <input onChange={e=> setPassword(e.target.value)} type='password'></input>\r\n            <button onClick={onLogin}>Login</button>\r\n          </form> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, {useState} from 'react';\r\nimport { useAlert } from 'react-alert';\r\nimport {HOSTNAME} from './../Constants'\r\n\r\nconst Login = (props) => {\r\n    const alert = useAlert();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [id, setID] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n    const onLogin = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (password !== confirmPassword)\r\n            alert.error('PASSWORD CONFIRMATION DOES NOT MATCH PLEASE CHECK');\r\n        else if (!id || !password || !confirmPassword)\r\n            alert.error('YOU MUST FILL ALL FIELDS TO REGISTER')\r\n        else {\r\n            try {\r\n            const res = await fetch(HOSTNAME + 'manager-registration/', {\r\n                method: 'POST', \r\n                headers: {\r\n                    'Content-Type' : 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    user_name: id.toLowerCase(),\r\n                    password,\r\n                })\r\n            })\r\n        \r\n            const data = await res.json();\r\n\r\n            if (data.status === 'SUCCESS')\r\n                alert.success('YOUR REQUEST HAS BEEN SUBMITTED, THE SWAG STORE MANAGER WILL CONFIRM THAT YOU ARE A MANAGER AND ACTIVATE YOUR ACCOUNT WITHIN 24HR')\r\n\r\n            else if (data.reason === 'NOT_ACTIVATED')\r\n                alert.error('YOUR ACCOUNT IS NOT YET ACTIVATED BY THE SWAG STORE MANAGER');\r\n\r\n            else if (data.reason === 'DUPLICATE')\r\n                alert.error('THIS LOGIN HAS BEEN REGISTERED AS A MANAGER ALREADY')\r\n\r\n            else alert.error('SERVER ERROR');\r\n\r\n            } catch (e) {\r\n                alert.error('NETWORK ERROR PLEASE CHECK YOUR CONNECTION')\r\n            }\r\n            setID('');\r\n            setPassword('');\r\n            setConfirmPassword('');\r\n        }\r\n        setLoading(false);\r\n    }\r\n    \r\n    const chooseRoute = () => {\r\n        switch(loading){\r\n            case true: return <div className='loader'></div>\r\n            default: return (\r\n                <div className='display'>\r\n                  <h3>Manager Registration</h3>\r\n                  <p style={{color: 'gray'}}>Welcome to our new security login! Please register with your Amazon Login!<br/>\r\n                    After you have successfully registered with your Amazon Login, the SWAG store manager will confirm <br/>\r\n                    your information through Amazon Phonetool and activate your account within 24 hours. <br/>\r\n                    This tool is available to Managers/Process Assistants/Shift Assistants (L3+)<br/>\r\n                    Thank you for your support!\r\n                    </p>\r\n                  <form style={{color: 'gray'}} onSubmit={onLogin}>\r\n                    <label>ID</label>\r\n                    <input onChange={e => setID(e.target.value)}></input>\r\n                    <label>Password</label>\r\n                    <input onChange={e=> setPassword(e.target.value)} type='password'></input>\r\n                    <label>Confirm Password</label>\r\n                    <input onChange={e=> setConfirmPassword(e.target.value)} type='password'></input>\r\n                    <button onClick={onLogin}>Register</button>\r\n                  </form> \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {chooseRoute()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, {useState} from 'react';\nimport ResetPassword from './Components/ResetPassword'\nimport MassUpload from './Components/MassUpload'\nimport Orders from './Components/Orders'\nimport CheckAssociate from './Components/CheckAssociate'\nimport Login from './Components/Login'\nimport Register from './Components/Register'\n\nimport './App.scss';\n\nfunction App() {\n\n\n  const [route, setRoute] = useState('INITIATE');\n  const [manager_user_name, setManager] = useState('')\n\n \n\n  const selectRoute = () => {\n    switch (route)\n    {\n      case 'LOADING': \n        return (<div className='center-screen'><div className='loader'></div></div>)\n\n      case 'INITIATE':\n        return (\n          <div className='center-screen'>\n            <div className='display' style={{maxWidth: '700px'}}>\n              <h3>ATTENTION</h3>\n              <p style={{color: '#696969'}}>Please use the Manual Delivery or Badge Scan Delivery Function to mark an order as 'DELIVERED' when handing out items to associates!</p>\n              <p style={{color: '#696969'}}>This also adds a timestamp on the delivery for future reference!</p>\n              <p style={{color: '#696969'}}>We are having problems with associates claiming they did not receive their orders!</p> \n              <p style={{fontWeight: 'bold'}}>Thank you for your support!</p>\n            </div>\n\n            <Login setRoute={setRoute} manager_user_name={manager_user_name} setManager={setManager}></Login>\n            <Register setRoute={setRoute}></Register>\n\n          </div>\n        )\n\n      default: \n        return (\n          <div className='center-screen'>\n              <h3 style={{color: 'white', textAlign: 'center', padding: '0.5em', margin: '0.5em',\n                  borderRadius: '10px', backgroundColor: '#d15d4b'}}>\n                  Notice: We are migrating away from the old SWAG store to the new SWAG store. \n                  Please do NOT make changes to the old store. \n                  Any changes to the old store will NOT reflect on the new store!\n                  Please use this tool to deposit SWAG BUCKS to Associates' accounts\n              </h3>\n              {\n                  \n                <h3 style={{color: 'white', textAlign: 'center', padding: '0.5em', margin: '0.5em',\n                    borderRadius: '10px', backgroundColor: '#d15d4b'}}>\n                    If you would like to get something from the store, feel free to add Swag $$ to yourself and order it!</h3>\n                  \n              }\n              <div className='display'>\n                <h3>ACCOUNT MANAGER'S INSTRUCTIONS</h3>\n                <p style={{color: 'gray'}}>To add swag $$ to an Associate, input the amount you would like to give, enter the justification and scan the Associate's Badge or Enter the Login<br/>\n                Please refer to this guide for using the Mass Swag Distribution function:</p>\n                  <a href=\"https://docs.google.com/document/d/18vQ-bbHLMPLGw07nFzrkLHNg6FYx3NfBAbYWgLa60WU/edit?usp=sharing\">\n                  https://docs.google.com/document/d/18vQ-bbHLMPLGw07nFzrkLHNg6FYx3NfBAbYWgLa60WU/edit?usp=sharing</a>\n                  <p style={{color: 'gray'}}>\n                To reset an Associate's Password, confirm and enter the login and click Submit<br/>\n                To check how much SWAG $$ an Associate has, scan Badge or enter the Login and click Submit\n                </p>\n              </div>\n              <div style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'center', alignItems:'center'}}>\n                  <MassUpload manager_user_name={manager_user_name}/>\n                  <div>\n                  <ResetPassword/>\n                  <CheckAssociate/>\n                  </div>\n                </div>\n\n                <Orders/>\n              </div>\n        )\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {selectRoute()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\n\nconst options = {\n  // you can also just use 'bottom center'\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: '30px',\n  // you can also just use 'scale'\n  transition: transitions.SCALE\n}\n \n\nReactDOM.render(\n  <React.StrictMode>\n    <AlertProvider template={AlertTemplate} {...options}>\n      <App />\n    </AlertProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}